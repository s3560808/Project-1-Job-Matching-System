@model iUni_Workshop.Models.EmployeeModels.EditCV

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}

<link rel="stylesheet" href="~/css/mdetails.css"/>

@await Html.PartialAsync("Shared/_Validation_Area_From_Backend")

<div id="ecv">

<h2>Edit Cv</h2>

<form asp-action="EditCvAction" method="post">
@{

    if (Model != null)
    {
        <input type="text" hidden="true" name="CvId" id="CvId" value="@Model.CvId">
    }
}

@{
    var title = "";
    if (Model != null)
    {
        title = Model.Title;
    }
}
<p>Title</p><input type="text" name="Title" value="@title">
<hr/>
@{
    var findJob = false;
    try
    {
        findJob = !(Model.FindJobStatus == false || (DateTime.Now.Day - Model.StartFindJobDate.Day) > 14);
    }
    catch (NullReferenceException)
    {

    }

}
<p>UpdateStatus?<input type="checkbox" name="UpdateStatus" value="true" checked="@findJob"></p>

<hr/>
@{
    bool primary = false;
    if (Model != null)
    {
        primary = Model.Primary;
    }
}
<p>PrimaryCv? <input type="checkbox" name="PrimaryCv" value="true" checked="@primary"></p>

<hr/>
@{
    var field = "";
    if (@Model != null)
    {
        field = Model.FieldName;
    }
}
<p>FieldName</p> <input type="text" name="FieldName" value="@field">

<hr/>
@{
    var description = "";
    if (@Model != null)
    {
        description = Model.Details;
    }
}
<p>Detail of Job</p><textarea name = "Description">@description</textarea><br/><br/><hr/>

<script>
    function AddSkillController() {
        var skillElements = document.getElementsByClassName("SkillClass");
        var skillElementsNumber = skillElements.length;
        var skillDiv = document.getElementById("Skills");
        //1. Create new div for new skill
        var divBox = document.createElement("div");
        divBox.className = "SkillClass";
        //1.1 Create skill name box
        var inputSkillName = document.createElement("input");
        inputSkillName.setAttribute("type", "text");
        inputSkillName.setAttribute("name", "[" + skillElementsNumber + "]" + ".SkillName");
        //1.2 Create skill certification link box
        var inputSkillLink = document.createElement("input");
        inputSkillLink.setAttribute("type", "text");
        inputSkillLink.setAttribute("name", "[" + skillElementsNumber + "]" + ".CertificationLink");
        //1.3 Create Skill name label
        var inputSkillNameLabel = document.createElement("p");
        inputSkillNameLabel.innerText = "Skill Name " + skillElementsNumber;
        //1.4 Create Skill Certification Link label
        var inputSkillLinkLabel = document.createElement("p");
        inputSkillLinkLabel.innerText = "Skill Certification Link " + skillElementsNumber;
        //2. Append sub elements of new skill div
        divBox.appendChild(inputSkillNameLabel);
        divBox.appendChild(inputSkillName);
        divBox.appendChild(inputSkillLinkLabel);
        divBox.appendChild(inputSkillLink);
        skillDiv.append(divBox);
    }

    function AddExternalMaterialsController() {
        var externalMaterialElements = document.getElementsByClassName("ExternalMaterialClass");
        var externalMaterialElementsNumber = externalMaterialElements.length;
        var externalMaterialDiv = document.getElementById("ExternalMaterials");
        //1. Create new div for new external material
        var divBox = document.createElement("div");
        divBox.className = "ExternalMaterialClass";
        //1.1 Create external material name box
        var inputExternalMaterialName = document.createElement("input");
        inputExternalMaterialName.setAttribute("type", "text");
        inputExternalMaterialName.setAttribute("name",
            "[" + externalMaterialElementsNumber + "]" + ".ExternalMaterialName");
        //1.2 Create external material certification link box
        var inputExternalMaterialLink = document.createElement("input");
        inputExternalMaterialLink.setAttribute("type", "text");
        inputExternalMaterialLink.setAttribute("name",
            "[" + externalMaterialElementsNumber + "]" + ".ExternalMaterialLink");
        //1.3 Create external material name label
        var inputExternalMaterialNameLabel = document.createElement("p");
        inputExternalMaterialNameLabel.innerText = "External Material Name " + externalMaterialElementsNumber;
        //1.4 Create external material Certification Link label
        var inputExternalMaterialLinkLabel = document.createElement("p");
        inputExternalMaterialLinkLabel.innerText =
            "External Material Certification Link " + externalMaterialElementsNumber;
        //2. Append sub elements of new skill div
        divBox.appendChild(inputExternalMaterialNameLabel);
        divBox.appendChild(inputExternalMaterialName);
        divBox.appendChild(inputExternalMaterialLinkLabel);
        divBox.appendChild(inputExternalMaterialLink);
        externalMaterialDiv.append(divBox);
    }
</script>

<div id="Skills">
    @{
        if (@Model?.Skills == null)
        {
            int i = 0;
            string skillName = "[" + 0 + "]" + ".SkillName";
            string link = "[" + 0 + "]" + ".CertificationLink";
            <div class="SkillClass">
                <p>Skill Name @i</p> <input type="text" name="@skillName">
                <p>Skill Certification Link @i</p> <input type="text" name="@link">
            </div>
        }
        else
        {
            for (int i = 0; i < @Model.Skills.Count; i++)
            {

                {
                    string skillName = "[" + i + "]" + ".SkillName";
                    string link = "[" + i + "]" + ".CertificationLink";
                    <div class="SkillClass">
                        <p>Skill Name @i</p> <input type="text" name="@skillName" value="@Model.Skills[i].SkillName">
                        <p>Skill Certification Link @i</p> <input type="text" name="@link" value="@Model.Skills[i].CertificationLink">
                    </div>
                }

                <hr/>
            }
        }
        <button class="btn" type="button" onclick="AddSkillController()">Add Skill</button>
    }
    <hr/>
</div>
<div id="ExternalMaterials">
    @{
        if (@Model?.externalMaterials == null)
        {
            var i = 0;
            var materialName = "[" + i + "]" + ".ExternalMaterialName";
            var materialLink = "[" + i + "]" + ".ExternalMaterialLink";
            <div class="ExternalMaterialClass">
                <p>External Material Name @i</p> <input type="text" name="@materialName">
                <p>External Material Link @i</p> <input type="text" name="@materialLink">
            </div>
        }
        else
        {
            for (var i = 0; i < @Model.externalMaterials.Count; i++)
            {
                {
                    var materialName = "[" + i + "]" + ".ExternalMaterialName";
                    var materialLink = "[" + i + "]" + ".ExternalMaterialLink";
                    <div class="ExternalMaterialClass">
                        <p>External Material Name @i</p> <input type="text" name="@materialName" value="@Model.externalMaterials[i].Name">
                        <p>External Material Link @i</p> <input type="text" name="@materialLink" value="@Model.externalMaterials[i].Link">
                    </div>
                }
            }
        }
        <button class="btn" type="button" onclick="AddExternalMaterialsController()">More External Material</button>
    }

    <hr/>
</div>
@{
    if (@Model == null || @Model.JobHistories == null)
    {
        int i = 0;
        string jobHistoryName = "[" + i + "]" + ".JobHistoryName";
        string jobHisotryDescription = "[" + i + "]" + ".JobHistoryShortDescription";
        <div class="HistoryClass">
            <p>Job History Name @i</p> <input type="text" name="@jobHistoryName">
            <p>Job History Short Description @i</p> <input type="text" name="@jobHisotryDescription">
        </div>
    }
    else
    {
        for (int i = 0; i < @Model.JobHistories.Count; i++)
        {
            {
                string jobHistoryName = "[" + i + "]" + ".JobHistoryName";
                string jobHisotryDescription = "[" + i + "]" + ".JobHistoryShortDescription";
                <div class="HistoryClass">
                    <p>Job History Name @i</p> <input type="text" name="@jobHistoryName" value="@Model.JobHistories[i].Name">
                    <p>Job History Short Description @i</p> <input type="text" name="@jobHisotryDescription" value="@Model.JobHistories[i].ShortDescription">
                </div>
            }

            <hr/>
        }

    }
    <button class="btn" type="button" onclick="AddJobHisotryController()">More Job History</button>
}

<hr/>
@{
    bool Mon = false;
    bool Tue = false;
    bool Wed = false;
    bool Thu = false;
    bool Fri = false;
    bool Sat = false;
    bool Sun = false;

    if (Model == null || Model.WorkDays == null)
    {
    }
    else
    {
        for (int i = 0; i < @Model.WorkDays.Count; i++)
        {
            switch (@Model.WorkDays[i].Day)
            {
                case 1:
                    Mon = true;
                    break;
                case 2:
                    Tue = true;
                    break;
                case 3:
                    Wed = true;
                    break;
                case 4:
                    Thu = true;
                    break;
                case 5:
                    Fri = true;
                    break;
                case 6:
                    Sat = true;
                    break;
                case 7:
                    Sun = true;
                    break;
            }
        }
    }
}
Monday <input type="checkbox" name="[0].Day" value="1" checked="@Mon">
Tuesday <input type="checkbox" name="[1].Day" value="2" checked="@Tue">
Wednesday <input type="checkbox" name="[2].Day" value="3" checked="@Wed">
Thursday <input type="checkbox" name="[3].Day" value="4" checked="@Thu">
Friday <input type="checkbox" name="[4].Day" value="5" checked="@Fri">
Saturday <input type="checkbox" name="[5].Day" value="6" checked="@Sat">    
Sunday <input type="checkbox" name="[6].Day" value="7" checked="@Sun">
<hr/>

@{
    float salary = 0;
    if (Model != null)
    {
        salary = @Model.MinSaraly;
    }

}
Min Salary<input type="number" name="MinSalary" min="0" step="0.01" value="@salary">
<hr/>
<button class="btn" type="submit">Submit</button>
</form>

</div>