@using iUni_Workshop.Models.AdministratorModels
@using iUni_Workshop.Models.SchoolModels

@using Microsoft.EntityFrameworkCore.Internal
@model iUniWorkshop.Models.EmployerModels.JobProfile
@*If profile already send invitation then the profile cannot change*@
@await Html.PartialAsync("Shared/_Validation_Area_From_Backend")

@{
    ViewBag.Title = "Edit Job Profile";
    Layout = "_Layout";
}

<style>
    
	#ejpp h2{
		color: #ff4000;
	}
</style>

<link rel="stylesheet" href="~/css/ejp.css"/>    
<script src="~/js/_AddSchool.js" type="text/javascript"></script>


@*UPdate date*@
<div id="content">

<div id="ejpp">

<h2 class="page">@ViewBag.Title</h2>



<form asp-action="EditJobProfileAction" method="post">
@*Profiled id(if not a new profield)*@
<div id="ProfileIdDiv">
	@if (@Model != null)
	{
		<input type="text" hidden name="ProfileId" id="ProfileId" value="@Model.ProfileId" class="ejpinput">
		<p>@Model.UpdateDate</p>
	}
	<hr/>
</div>

@*Field of Job Profile*@
<div id="FieldDiv">
	@{
		string FieldName = "";
		if (@Model != null)
		{
			FieldName = Model.FieldName;
		}
	}
	<p>Select a Field Name:</p>
	<select name="FieldName" value="@FieldName" id="fieldList">
	</select>
	<hr/>
</div>

@*Title of Job Profile*@
<div id="TitleDiv">
	@{
		string Title = "";
		if (@Model != null)
		{
			Title = Model.Title;
		}
	}
	<p>Title of Job Profile / Name:</p> <input class="ejpinput" type="text" name="Title" maxlength="30" value="@Title">
	<hr/>
</div>

@*Description of Job Profile*@
<div id="DescriptionDiv">
	@{
		string description = "";
		if (@Model != null)
		{
			description = Model.Description;
		}
	}
	<p>Description of Job Profile:</p><textarea name="Description" placeholder="Write Description" style="width: 80%; height: 200px; resize: none;"  >@description</textarea>

	<hr/>
</div>

@*Job Experience Required? of Job Profile*@
<div id="ExperienceDiv">
	@{
		bool requireJobExperience = false;
		if (@Model != null)
		{
			requireJobExperience = Model.RequireJobExperience;
		}
	}
	<p>Experience Required: </p><input id="ch"type="checkbox" name="RequireJobExperience" onclick="return myFun()" checked="@requireJobExperience" value="true">Yes<br>
	<br>

	<div>
		<p  id="note" style="display: none;">Experience Required Selected &#x2713</p>
	</div>

	<script type="text/javascript">
		function myFun() {
			var checkbox = document.getElementById("ch");
			var text = document.getElementById("note");

			if (checkbox.checked) {
				text.style.display = "block";
				text.style.color = "greenyellow";
			}
			else {
				text.style.display = "none";
			}
		}


	</script>
	<hr/>
</div>

@*Max work day of Job Profile*@
<div id="MaxDayDiv">
	@{
		int? max = null;
		if (@Model != null)
		{
			max = Model.MaxDay;
		}
	}
	<p>Max amount of days for the Job:</p> <input class="ejpinput" type="number" name="MaxDay" value="@max" min="0" max="7" style="width: 150px;">
	<hr/>
</div>

@*Min work day of Job Profile*@
<div id="MinDayDiv">
	@{
		int? min = null;
		if (@Model != null)
		{
			min = Model.MinDay;
		}
	}
	<p>Minimum amount of days for the Job:</p><input class="ejpinput" type="number" name="MinDay" value="@min" min="0" max="7" style="width: 150px;">
	<hr/>
</div>


@*Salary of Job Profile*@
<div id="SalaryDiv">
	@{
		float? salary = null;
		if (@Model != null)
		{
			salary = Model.Salary;
		}
	}
	<p>Salary for Job:</p><input class="ejpinput" type="number" name="Salary" value="@salary" step="0.01" min="1" max="999999.99" placeholder="$amount" style="width: 150px;">
	<hr/>
</div>

@*Skills of Job Profile*@
<div id="SkillsDiv">
	@{
		if (@Model == null || !@Model.JobProfileSkills.Any())
		{
			int i = 0;
			string skillName = "[" + 0 + "]" + ".SkillName";
			string skillRequired = "[" + 0 + "]" + ".SkillRequired";
			<div class="SkillClass">
				<p>Skill Name @i:</p>
				<input class="ejpinput" type="text" name="@skillName" list="skillList" onkeyup="getSkillName(this.value)"><br>
				<datalist id="skillList"></datalist>
				<p>Required @i:
					<input class="ejpinput" type="checkbox" name="@skillRequired" value="true">
				</p>
			</div>
		}
		else
		{
			if (@Model != null)
			{
				for (int i = 0; i < @Model.JobProfileSkills.Count; i++)
				{
					string skillName = "[" + i + "]" + ".SkillName";
					string skillRequired = "[" + i + "]" + ".SkillRequired";
					<div class="SkillClass">
						<p>Skill Name @i</p>
						<input class="ejpinput" type="text" name="@skillName" list="skillList" onkeyup="getSkillName(this.value)" value="@Model.JobProfileSkills[i].SkillName">
						<datalist id="skillList"></datalist>
						<p>Required @i</p>
						@*Value = true?*@
						<input class="ejpinput" type="checkbox" name="@skillRequired" checked="@Model.JobProfileSkills[i].SkillRequired" value="true">
					</div>
				}
			}
		}
		<br>
		<button type="button" onclick="AddSkillController()">Add Skill</button>
	}
	<hr/>
</div>

@*Required Locations of Job Profile*@
<div id="LocationDiv">
	@{
		if (@Model == null || @Model.JobProfileRequiredLocation.Count() == 0)
		{
			var locationName = "[" + 0 + "]" + ".LocationName";
			var postCode = "[" + 0 + "]" + ".PostCode";
			<div class="LocationClass">
				<p>Location Name 0:</p>
				@*<input class="ejpinput" type="text" name="@locationName">*@
				<input class="ejpinput" type="text" name="@locationName" id = "SuburbId" list="SuburbNameList" onkeyup="GetSuburbName(this.value)">
				<datalist id="SuburbNameList">
				</datalist>
				
				<p>Postcode 0:</p>
				@*<input class="ejpinput" type="number" name="@postCode" >*@
				<input class="ejpinput" type="number" name="@postCode" id = "PostCode" list="PostCodeList">
				<datalist id="PostCodeList">
				</datalist>
			</div>
		}
		else
		{
			for (int i = 0; i < @Model.JobProfileRequiredLocation.Count; i++)
			{

				{
					string locationName = "[" + i + "]" + ".LocationName";
					string postCode = "[" + i + "]" + ".PostCode";
					<div class="LocationClass">
						<p>Location Name @i</p>
						<input class="ejpinput" type="text" name="@locationName" value="@Model.JobProfileRequiredLocation[i].LocationName">
						
						<p>Postcode @i</p>
						@*Value = true?*@
						<input class="ejpinput" type="text" name="@postCode" value="@Model.JobProfileRequiredLocation[i].PostCode">
					</div>
				}

			}
		}
		<br>
		<button type="button" onclick="AddLocationToProfile()">Add Location</button>
	}
	<hr/>
</div>

@*Required Schools of Job Profile*@
<div id="SchoolsDiv">
	@{
		if (@Model == null || @Model.EmployerRequiredSchools.Count() == 0)
		{
			string schoolName = "[" + 0 + "]" + ".SchoolName";
			string campus = "[" + 0 + "]" + ".Campus";
			<div class="SchoolClass">
				<p>School Name 0:</p>
				<input class="ejpinput" type="text" name="@schoolName">
				<p>Campus 0:</p>
				<input class="ejpinput" type="text" name="@campus">
			</div>
		}
		else
		{
			for (int i = 0; i < @Model.EmployerRequiredSchools.Count; i++)
			{

				{
					string schoolName = "[" + i + "]" + ".SchoolName";
					string campus = "[" + i + "]" + ".Campus";
					<div class="SchoolClass">
						<p>School Name @i</p>
						<input class="ejpinput" type="text" name="@schoolName" value="@Model.EmployerRequiredSchools[i].SchoolName">
						<p>Campus @i</p>
						@*Value = true?*@
						<input class="ejpinput" type="text" name="@campus" value="@Model.EmployerRequiredSchools[i].CampusName">
					</div>
				}
			}
		}
		<br>
		<button type="button" onclick="AddSchoolToProfile()">Add School</button>
	}
	<hr/>
</div>

@*Complusory work day*@
<div id="ComplusoryWorkDay">
	@{
		bool Mon = false;
		bool Tue = false;
		bool Wed = false;
		bool Thu = false;
		bool Fri = false;
		bool Sat = false;
		bool Sun = false;

		if (Model == null || Model.JobProfileComplusoryWorkDays == null)
		{
		}
		else
		{
			for (int i = 0; i < @Model.JobProfileComplusoryWorkDays.Count; i++)
			{
				switch (@Model.JobProfileComplusoryWorkDays[i].Day)
				{
					case 1:
						Mon = true;
						break;
					case 2:
						Tue = true;
						break;
					case 3:
						Wed = true;
						break;
					case 4:
						Thu = true;
						break;
					case 5:
						Fri = true;
						break;
					case 6:
						Sat = true;
						break;
					case 7:
						Sun = true;
						break;
				}
			}
		}
	}
	<p>Compulsory Work Day(s):</p><br>
	<p>Monday <input type="checkbox" name="[0].Day" value="1" checked="@Mon"></p><br>
	<p>Tuesday <input type="checkbox" name="[1].Day" value="2" checked="@Tue"></p><br>
	<p>Wednesday <input type="checkbox" name="[2].Day" value="3" checked="@Wed"></p><br>
	<p>Thursday <input type="checkbox" name="[3].Day" value="4" checked="@Thu"></p><br>
	<p>Friday <input type="checkbox" name="[4].Day" value="5" checked="@Fri"></p><br>
	<p>Saturday <input type="checkbox" name="[5].Day" value="6" checked="@Sat"></p><br>
	<p>Sunday <input type="checkbox" name="[6].Day" value="7" checked="@Sun"></p><br>
	<hr/>
</div>


<button type="submit">Submit</button>



<script>
	function AddSkillController() {
		
     		var suburbselectbox = document.getElementsByClassName("SkillClass");
     		var boxNumber = suburbselectbox.length;
     		var divBox = document.createElement("div");
     		divBox.className = "SkillClass";
     		var inputSkillName = document.createElement("input");
     		inputSkillName.setAttribute("type", "text");
     		inputSkillName.setAttribute("name", "[" + boxNumber + "]" + ".SkillName");
     		var inputSkillLink = document.createElement("input");
     		inputSkillLink.setAttribute("type", "text");
     		inputSkillLink.setAttribute("name", "[" + boxNumber + "]" + ".CertificationLink");
     		var inputSkillNameLable = document.createElement("p");
     		inputSkillNameLable.innerText = "Skill Name " + boxNumber;
     		var inputSkillLinkLable = document.createElement("p");
     		inputSkillLinkLable.innerText = "Skill Certification Link " + boxNumber;
     		divBox.appendChild(inputSkillNameLable);
     		divBox.appendChild(inputSkillName);
     		divBox.appendChild(inputSkillLinkLable);
     		divBox.appendChild(inputSkillLink);
     		var last = suburbselectbox[boxNumber - 1];
     		last.append(divBox);
     	}
	
	function AddLocationToProfile() {
     		var locselectbox = document.getElementsByClassName("LocationClass");
     		var boxNumber = locselectbox.length;
     		var divBox = document.createElement("div");
     		divBox.className = "LocationClass";
     		var inputLocationName = document.createElement("input");
     		inputLocationName.setAttribute("type", "text");
     		inputLocationName.setAttribute("name", "[" + boxNumber + "]" + ".LocationName");
     		var inputPostCode = document.createElement("input");
     		inputPostCode.setAttribute("type", "text");
     		inputPostCode.setAttribute("name", "[" + boxNumber + "]" + ".PostCode");
     		var inputLocationNameLable = document.createElement("p");
     		inputLocationNameLable.innerText = "Location Name " + boxNumber;
     		var inputPostCodeLable = document.createElement("p");
     		inputPostCodeLable.innerText = "Postcode " + boxNumber;
     		divBox.appendChild(inputLocationNameLable);
     		divBox.appendChild(inputLocationName);
     		divBox.appendChild(inputPostCodeLable);
     		divBox.appendChild(inputPostCode);
     		var last = locselectbox[boxNumber - 1];
     		last.append(divBox);
     	}
	
	function AddSchoolToProfile() {
		var schoolselectbox = document.getElementsByClassName("SchoolClass");
		var boxNumber = schoolselectbox.length;
		var divBox = document.createElement("div");
		divBox.className = "SchoolClass";
		var inputSchoolName = document.createElement("input");
		inputSchoolName.setAttribute("type", "text");
		inputSchoolName.setAttribute("name", "[" + boxNumber + "]" + ".SchoolName");
		var inputCampus = document.createElement("input");
		inputCampus.setAttribute("type", "text");
		inputCampus.setAttribute("name", "[" + boxNumber + "]" + ".Campus");
		var inputSchoolNameLable = document.createElement("p");
		inputSchoolNameLable.innerText = "School Name " + boxNumber;
		var inputCampusLable = document.createElement("p");
		inputCampusLable.innerText = "Campus " + boxNumber;
		divBox.appendChild(inputSchoolNameLable);
		divBox.appendChild(inputSchoolName);
		divBox.appendChild(inputCampusLable);
		divBox.appendChild(inputCampus);
		var last = schoolselectbox[boxNumber - 1];
		last.append(divBox);
	}

	function AddMeterialController() {
		var suburbselectbox = document.getElementsByClassName("MaterialClass");
		var boxNumber = suburbselectbox.length;
		var divBox = document.createElement("div");
		divBox.className = "MaterialClass";
		var inputSkillName = document.createElement("input");
		inputSkillName.setAttribute("type", "text");
		inputSkillName.setAttribute("name", "[" + boxNumber + "]" + ".ExternalMeterialName");
		var inputSkillLink = document.createElement("input");
		inputSkillLink.setAttribute("type", "text");
		inputSkillLink.setAttribute("name", "[" + boxNumber + "]" + ".ExternalMeterialLink");
		var inputSkillNameLable = document.createElement("p");
		inputSkillNameLable.innerText = "External Meterial Name " + boxNumber;
		var inputSkillLinkLable = document.createElement("p");
		inputSkillLinkLable.innerText = "External Meterial Link " + boxNumber;
		divBox.appendChild(inputSkillNameLable);
		divBox.appendChild(inputSkillName);
		divBox.appendChild(inputSkillLinkLable);
		divBox.appendChild(inputSkillLink);
		var last = suburbselectbox[boxNumber - 1];
		last.append(divBox);
	}

	function AddJobHisotryController() {
		var suburbselectbox = document.getElementsByClassName("HistoryClass");
		var boxNumber = suburbselectbox.length;
		var divBox = document.createElement("div");
		divBox.className = "HistoryClass";
		var inputSkillName = document.createElement("input");
		inputSkillName.setAttribute("type", "text");
		inputSkillName.setAttribute("name", "[" + boxNumber + "]" + ".JobHistoryName");
		var inputSkillLink = document.createElement("input");
		inputSkillLink.setAttribute("type", "text");
		inputSkillLink.setAttribute("name", "[" + boxNumber + "]" + ".JobHistoryShortDescription");
		var inputSkillNameLable = document.createElement("p");
		inputSkillNameLable.innerText = "Job History Name " + boxNumber;
		var inputSkillLinkLable = document.createElement("p");
		inputSkillLinkLable.innerText = "Job History Short Description " + boxNumber;
		divBox.appendChild(inputSkillNameLable);
		divBox.appendChild(inputSkillName);
		divBox.appendChild(inputSkillLinkLable);
		divBox.appendChild(inputSkillLink);
		var last = suburbselectbox[boxNumber - 1];
		last.append(divBox);

	}

	function getSkillName(skillName) {
		var postCodeSelectBox = document.getElementById("skillList");
		postCodeSelectBox.innerHTML = "";
		var xmlHttp = new XMLHttpRequest();
		xmlHttp.onreadystatechange = function() {
			if (this.readyState === 4 && this.status === 200) {
				var skills = JSON.parse(this.responseText);
				for (var i = 0; i < skills.length; i++) {
					var skill = document.createElement("OPTION");
					skill.value = skills[i];
					postCodeSelectBox.appendChild(skill);
				}
			}
		};
		xmlHttp.open("GET", "/Skill/GetSkillName/" + skillName, true);
		xmlHttp.send();
	}

	window.onload = function getFieldName() {
		var postCodeSelectBox = document.getElementById("fieldList");
		postCodeSelectBox.innerHTML = "";
		var xmlHttp = new XMLHttpRequest();
		xmlHttp.onreadystatechange = function() {
			if (this.readyState === 4 && this.status === 200) {
				var fields = JSON.parse(this.responseText);
				for (var i = 0; i < fields.length; i++) {
					var field = document.createElement("OPTION");
					field.value = fields[i];
					field.innerText = fields[i];
					postCodeSelectBox.appendChild(field);
				}
			}
		};
		xmlHttp.open("GET", "/Field/GetAllFields/", true);
		xmlHttp.send();
	}
</script>
</form>

</div>
</div>
